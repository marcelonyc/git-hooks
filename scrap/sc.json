{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2018-20225_pip_23.3.1",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 23.3.1"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Undetermined       | `pip 23.3.1`       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-48795_paramiko_2.3.2",
              "shortDescription": {
                "text": "[CVE-2023-48795] paramiko 2.3.2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `paramiko 2.3.2`       | [3.4.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2018-1000805_paramiko_2.3.2",
              "shortDescription": {
                "text": "[CVE-2018-1000805] paramiko 2.3.2"
              },
              "help": {
                "text": "Paramiko version 2.4.1, 2.3.2, 2.2.3, 2.1.5, 2.0.8, 1.18.5, 1.17.6 contains a Incorrect Access Control vulnerability in SSH server that can result in RCE. This attack appear to be exploitable via network connectivity.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `paramiko 2.3.2`       | [2.0.9], [2.1.6], [2.2.4], [2.3.3], [2.4.2]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            }
          ],
          "version": "3.91.2"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-20225_pip_23.3.1",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] pip 23.3.1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://requirements.txt"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_paramiko_2.3.2",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] paramiko 2.3.2"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://requirements.txt"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-1000805_paramiko_2.3.2",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2018-1000805] paramiko 2.3.2"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://requirements.txt"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/contextual-analysis",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2018-1000805",
              "name": "CVE-2018-1000805",
              "shortDescription": {
                "text": "Scanner for CVE-2018-1000805"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable class `paramiko.ServerInterface` is subclassed.",
                "markdown": "The scanner checks whether the vulnerable class `paramiko.ServerInterface` is subclassed."
              },
              "properties": {
                "security-severity": "6.9"
              }
            }
          ],
          "version": "1.6.3"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/Users/marcel/.jfrog/dependencies/analyzerManager/ca_scanner/applicability_scanner",
            "scan",
            "/var/folders/2l/4z1shz7n07d7fbw03q7c78380000gn/T/jfrog.cli.temp.-1710424079-1785296023/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/Users/marcel/Library/CloudStorage/GoogleDrive-marcelol@jfrog.com/My Drive/Demos/python-dash"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2018-1000805",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable class `paramiko.ServerInterface` is subclassed."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/infrastructure-as-code-iac",
          "name": "JFrog Terraform scanner",
          "rules": [],
          "version": "1.6.3"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/Users/marcel/.jfrog/dependencies/analyzerManager/iac_scanner/tf_scanner",
            "scan",
            "/var/folders/2l/4z1shz7n07d7fbw03q7c78380000gn/T/jfrog.cli.temp.-1710424079-1785296023/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/Users/marcel/Library/CloudStorage/GoogleDrive-marcelol@jfrog.com/My Drive/Demos/python-dash"
          }
        }
      ],
      "results": []
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/secrets",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "source",
              "shortDescription": {
                "text": "Scanner for source"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "security-severity": "6.9"
              }
            }
          ],
          "version": "1.6.3"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/Users/marcel/.jfrog/dependencies/analyzerManager/secrets_scanner/secrets_scanner",
            "scan",
            "/var/folders/2l/4z1shz7n07d7fbw03q7c78380000gn/T/jfrog.cli.temp.-1710424079-1785296023/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/Users/marcel/Library/CloudStorage/GoogleDrive-marcelol@jfrog.com/My Drive/Demos/python-dash"
          }
        }
      ],
      "results": [
        {
          "ruleId": "source",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/marcel/Library/CloudStorage/GoogleDrive-marcelol%40jfrog.com/My%20Drive/Demos/python-dash/src/cloud/config.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 43,
                  "snippet": {
                    "text": "AWS************"
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sast",
          "name": "USAF",
          "rules": [],
          "version": "1.6.3"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/Users/marcel/.jfrog/dependencies/analyzerManager/zd_scanner/scanner",
            "scan",
            "/var/folders/2l/4z1shz7n07d7fbw03q7c78380000gn/T/jfrog.cli.temp.-1710424079-1785296023/results.sarif",
            "/var/folders/2l/4z1shz7n07d7fbw03q7c78380000gn/T/jfrog.cli.temp.-1710424079-1785296023/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/Users/marcel/Library/CloudStorage/GoogleDrive-marcelol@jfrog.com/My Drive/Demos/python-dash"
          }
        }
      ],
      "results": []
    }
  ]
}
